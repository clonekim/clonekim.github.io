<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on (Less is more)</title>
    <link>http://clonekim.github.io/tags/docker/</link>
    <description>Recent content in docker on (Less is more)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <managingEditor>clonekim-at-gmail-dot-com (DAEHEE KIM)</managingEditor>
    <webMaster>clonekim-at-gmail-dot-com (DAEHEE KIM)</webMaster>
    <lastBuildDate>Mon, 24 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://clonekim.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spark - Docker 이미지만들기</title>
      <link>http://clonekim.github.io/posts/2018/2018-12-24-how-spark/</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
      <author>clonekim-at-gmail-dot-com (DAEHEE KIM)</author>
      <guid>http://clonekim.github.io/posts/2018/2018-12-24-how-spark/</guid>
      <description>Spark Docker를 이용한 스파크 실습  Docker Image 만들기 spark-version-tgz는 미리 홈페이지에서 다운받아둘것
├── Dockerfile ├── config │ ├── core-site.xml │ ├── hdfs-site.xml │ └── spark-env.sh ├── spark-2.4.0-bin-hadoop2.7.tgz └── start-spark.sh  Dockerfile
FROM ubuntu:18.04 ENV SPARK_HOME /opt/spark ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64 RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \ wget \ python3 \ psmisc \ net-tools \ openjdk-8-jdk &amp;amp;&amp;amp; \ apt-get autoclean &amp;amp;&amp;amp; \ ln -s /usr/bin/python3 /usr/bin/python RUN wget http://apache.</description>
    </item>
    
    <item>
      <title>Docker 시작하기</title>
      <link>http://clonekim.github.io/posts/2016/2016-03-01-docker-start/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      <author>clonekim-at-gmail-dot-com (DAEHEE KIM)</author>
      <guid>http://clonekim.github.io/posts/2016/2016-03-01-docker-start/</guid>
      <description>Docker 시작하기 이미지다운로드
$ docker pull [이미지이름]  컨테이너 생성
$ docker run --name [컨테이너이름]  컨테이너로 접속
$ docker exec -it [컨테이너] bash  컨테이너 시작/재시작
$ docker start [컨테이너이름] $ docker stop [컨테이너이름]  MySQL 사용하기 mysql이미지를 다운로드와 함께 컨테이너 시작하기
$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -e TZ=Asia/Seoul -p 3306:3306 -d mysql --character-set-server=utf8  컨테이너확인
$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES cf5fbb3d49b1 mysql &amp;quot;docker-entrypoint.</description>
    </item>
    
  </channel>
</rss>