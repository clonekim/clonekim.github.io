<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://clonekim.github.io/' rel='self' type='application/rss+xml'/>
<title>
On the Clojure
</title>
<link>
http://clonekim.github.io/
</link>
<description>
This blog is generated using cryogen
</description>
<lastBuildDate>
Thu, 14 Jan 2016 01:29:41 +0900
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://clonekim.github.io/posts/2016-01-07-github-page.html
</guid>
<link>
http://clonekim.github.io/posts/2016-01-07-github-page.html
</link>
<title>
Github에 블로그제작
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;깃허브에&amp;#95;계정만들기&quot;&gt;&lt;/a&gt;깃허브에 계정만들기&lt;/h2&gt;&lt;p&gt;먼저 &lt;a href='http://github.com'&gt;github.com&lt;/a&gt;에 가입하고 저장소를 만든다&lt;br /&gt; 저장소는 계정명.github.io라고 작성한다. 자세한 것은 &lt;a href='https://help.github.com/articles/what-are-github-pages/'&gt;GitHub Page&lt;/a&gt;를 살펴볼 것&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;lein&amp;#95;설치하고&amp;#95;템플릿작성&quot;&gt;&lt;/a&gt;lein 설치하고 템플릿작성&lt;/h2&gt;&lt;p&gt;&lt;a href='http://leiningen.org/'&gt;leiningen&lt;/a&gt; 을 설치한다&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;블로그&amp;#95;프로젝트를&amp;#95;생성한다&quot;&gt;&lt;/a&gt;블로그 프로젝트를 생성한다&lt;/h2&gt;&lt;p&gt;cryogen을 이용해서 블로그 프로젝트를 생성한다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new cryogen my-blog
cd my-blog
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;git&amp;#95;clone한다&quot;&gt;&lt;/a&gt;git clone한다&lt;/h2&gt;&lt;p&gt;public 디렉토리는 없기때문에 작성한다&lt;br /&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;예&amp;#41; git@github.com:&amp;#91;계정명&amp;#93;/&amp;#91;생성한 저장소&amp;#93; &amp;#91;target 디렉토리&amp;#93;  
git clone git@github.com:clonekim/clonekim.github.io.git resources/public
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;config.edn&amp;#95;편집&quot;&gt;&lt;/a&gt;config.edn 편집&lt;/h2&gt;&lt;p&gt;resources/templates/config.edn를 편집한다&lt;br /&gt; 내용중 아래와 같이 &quot;&quot;으로 설정한다&lt;pre&gt;&lt;code&gt;:blog-prefix &amp;quot;&amp;quot;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;서버&amp;#95;시작&quot;&gt;&lt;/a&gt;서버 시작&lt;/h2&gt;&lt;p&gt;아래 명령어로 서버를 시작한다&lt;br /&gt; 서버는 로컬에서 시작하고 앞으로 작성할 문서를 서버에서 파싱해주는 역할을 한다&lt;br /&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein ring server
&lt;/code&gt;&lt;/pre&gt;서버를 시작하고 http://localhost:3000 에 접속한다  &lt;br /&gt;&lt;h2&gt;&lt;a name=&quot;마크다운으로&amp;#95;기사&amp;#95;작성하기&quot;&gt;&lt;/a&gt;마크다운으로 기사 작성하기&lt;/h2&gt;&lt;p&gt;resources/templates/md/posts에 yyyy-mm-dd-[페이지명].md 형식으로 파일을 작성한다&lt;pre&gt;&lt;code&gt;{:title &amp;quot;TEST 기사&amp;quot;
 :layout :post
 :tags  &amp;#91;&amp;quot;태그1&amp;quot; &amp;quot;태그2&amp;quot;&amp;#93;
 :toc true}
여기에 마크다운문법을 이용해서 작성한다...
## Hello
 
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;파일을 편집하고 저장 할 때 마다 서버에서 자동으로 마크다운 페이지를 파싱하여&lt;br /&gt; resources/publc 밑에 결과물을 생성해 낸다 결국 public 디렉토리만 github에 올리면 끝&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;github에&amp;#95;올리기&quot;&gt;&lt;/a&gt;github에 올리기&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;git add --all
git commit -m &amp;quot;cryogen 적용&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 07 Jan 2016 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://clonekim.github.io/posts/2015-09-25-using-jdbc-in-clojure.html
</guid>
<link>
http://clonekim.github.io/posts/2015-09-25-using-jdbc-in-clojure.html
</link>
<title>
클로저에서 Jdbc사용
</title>
<description>
&lt;p&gt; 클로저에서 JDBC(Java Database Connectivity) 를 사용하기 위한 가이드&lt;br /&gt;  몇몇 함수가 없어진 경우가 있기 때문에 소스보기로 확인할 것&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://clojure-doc.org/articles/ecosystem/java_jdbc/home.html'&gt;clojure-doc보기&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/clojure/java.jdbc/blob/java.jdbc-0.4.2/src/main/clojure/clojure/java/jdbc.clj'&gt;소스보기&lt;/a&gt;   &lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;leiningen&quot;&gt;&lt;/a&gt;leiningen&lt;/h2&gt; &lt;pre&gt;&lt;code&gt;&amp;#91;org.clojure/java.jdbc &amp;quot;0.4.2&amp;quot;&amp;#93;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;간단한&amp;#95;예제&quot;&gt;&lt;/a&gt;간단한 예제&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;ns db-test.core
	&amp;#40;:require &amp;#91;clojure.java.jdbc :as sql&amp;#93;&amp;#41;&amp;#41;	

&amp;#40;def db
  {:classname &amp;quot;com.mysql.jdbc.Driver&amp;quot;
   :subprotocol &amp;quot;mysql&amp;quot;
   :subname &amp;quot;//127.0.0.1:3306/test&amp;quot;
   :user &amp;quot;xxx&amp;quot;
   :password &amp;quot;xxxx&amp;quot; }&amp;#41;

&amp;#40;defn get-user &amp;#91;&amp;#93;
  &amp;#40;println &amp;#40;sql/query db &amp;#91;&amp;quot;select &amp;#42; from users&amp;quot;&amp;#93;&amp;#41;&amp;#41;&amp;#41; 

&amp;#40;defn -main &amp;#91;&amp;#93; 
  &amp;#40;get-user&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;참고&quot;&gt;&lt;/a&gt;참고&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://php-hackers.com/p/devn/hikari-cp'&gt;HikarCP를 사용하는 예&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://funcool.github.io/clojure.jdbc/latest'&gt;clojure.jdbc doc&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 25 Sep 2015 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://clonekim.github.io/posts/2015-09-25-get-started-clojure.html
</guid>
<link>
http://clonekim.github.io/posts/2015-09-25-get-started-clojure.html
</link>
<title>
Clojure 시작하기
</title>
<description>
&lt;p&gt;JVM위에서 작동하는 함수형 프로그래밍이다&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;clojure&amp;#95;얻기&quot;&gt;&lt;/a&gt;clojure 얻기&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;http://clojure.org/&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;ide/tools&quot;&gt;&lt;/a&gt;IDE/Tools&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://lighttable.com'&gt;LightTable&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://cursiveclojure.com'&gt;Cursive&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Emacs&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;leiningen으로&amp;#95;시작하기&quot;&gt;&lt;/a&gt;Leiningen으로 시작하기&lt;/h2&gt;&lt;p&gt;Leiningen(레닝겐)은 클로져를 쉽게 시작하기 위한 빌드자동화 툴이다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://leiningen.org/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/img/clojure/lein-self-install.png&quot; alt=&quot;Image 1&quot; /&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;project&amp;#95;생성&quot;&gt;&lt;/a&gt;Project 생성&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;lein new &amp;#91;프로젝트명&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;repl(read&amp;#95;eval&amp;#95;print&amp;#95;loop)&amp;#95;실행&quot;&gt;&lt;/a&gt;REPL(Read Eval Print Loop) 실행&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;lein repl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;도움말 보기&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;user=&amp;gt; &amp;#40;doc conj&amp;#41;
-------------------------
clojure.core/conj
&amp;#40;&amp;#91;coll x&amp;#93; &amp;#91;coll x &amp;amp; xs&amp;#93;&amp;#41;
  conj&amp;#91;oin&amp;#93;. Returns a new collection with the xs
    'added'. &amp;#40;conj nil item&amp;#41; returns &amp;#40;item&amp;#41;.  The 'addition' may
    happen at different 'places' depending on the concrete type.
nil
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;자료구조&quot;&gt;&lt;/a&gt;자료구조&lt;/h2&gt;&lt;p&gt;repl에서 아래를 입력해보고 결과를 보자&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;4/2
;; 2

4.0/2
;; NumberFormatException Invalid number: 4.0/2

&amp;#40;/ 1 3&amp;#41;
;;  1/3

&amp;#40;/ 1.0 3&amp;#41;
;; 0.3333333333333

&amp;quot;jam&amp;quot;
;; 문자열은 반드시 쌍따옴표를 사용할 것

:jam
;; 이것은 키워드

&amp;#40;+ 1 1&amp;#41;
;; 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;collecton 과 sequence로 나뉘는데&lt;br /&gt; 콜렉션은 단순히 vecotr, list, map 이 있고 영속적이고 불변적인 데이터구조이고&lt;br /&gt; clojure.lang.IPersistentCollection 인터페이스를 구현한 녀석들이다&lt;/p&gt;&lt;p&gt;그리고 count, conj, seq라는 메서드를 사용할 수있다&lt;/p&gt;&lt;p&gt;seq라는 함수는 콜렉션을 시퀀스로 바꿔주는 역할을 한다.&lt;/p&gt;&lt;p&gt;시퀀스란 walkable(순회가능한)리스트이다 또한 영속적이고 불변적이고&lt;br /&gt; first, rest, cons라는 메서드를 사용한다.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;user=&amp;gt; &amp;#40;class &amp;#91;1 2 3&amp;#93;&amp;#41;
clojure.lang.PersistentVector
user=&amp;gt; &amp;#40;class &amp;#40;seq &amp;#91;1 2 3&amp;#93;&amp;#41;&amp;#41;
clojure.lang.PersistentVector$ChunkedSeq
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;list&quot;&gt;&lt;/a&gt;List&lt;/h3&gt;&lt;p&gt;리스트는 '(quote)로 시작 하거나 list를 사용할 것&lt;br /&gt; 만약 '(' 로 시작하면 문법파싱이 일어나서 첫번째를 함수로 인식 결국 에러 발생&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;'&amp;#40;1 2 &amp;quot;jam&amp;quot; :jack&amp;#41;

;;위와 같음 콤마&amp;#40;,&amp;#41;는 생략가능
'&amp;#40;1, 2, &amp;quot;jam&amp;quot;, :jack&amp;#41;

&amp;#40;list 1 2 3 4&amp;#41;
;; &amp;#40;1 2 3 4&amp;#41;

&amp;#40;first '&amp;#40;1 2 3 4&amp;#41;&amp;#41;
;; 1

&amp;#40;rest '&amp;#40;1 2 3 4&amp;#41;&amp;#41;
;; &amp;#40;2 3 4&amp;#41;

&amp;#40;last '&amp;#40;1 2 3 4&amp;#41;&amp;#41;
;; 4

&amp;#40;cons 4 '&amp;#40;1 2 3&amp;#41;&amp;#41;
;; &amp;#40;4 1 2 3&amp;#41;

&amp;#40;cons 5 '&amp;#40;&amp;#41;&amp;#41;
;; &amp;#40;5&amp;#41;

&amp;#40;cons 5 nil&amp;#41;
;; &amp;#40;5&amp;#41;

&amp;#40;conj '&amp;#40;1 2 3&amp;#41; 4&amp;#41;
;; &amp;#40;4 1 2 3&amp;#41;

&amp;#40;conj '&amp;#40;1 2 3&amp;#41; 4 5&amp;#41;
;; &amp;#40;5 4 1 2 3&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;vector&quot;&gt;&lt;/a&gt;Vector&lt;/h3&gt;&lt;p&gt; [ ]를 사용하여 표현하고 인덱스값으로 접근이 가능함&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#91;:jam 1 2 3&amp;#93;

&amp;#40;first &amp;#91;:jam 1 2 3&amp;#93;&amp;#41;
;; :jam

&amp;#40;rest &amp;#91;:jam 1 2 3&amp;#93;&amp;#41;
;; &amp;#40;1 2 3&amp;#41;

&amp;#40;last &amp;#91;:jam 1 2 3&amp;#93;&amp;#41;
;; 3

&amp;#40;nth &amp;#91;:jam 1 2 3&amp;#93; 2&amp;#41;
;; 2

&amp;#40;count &amp;#91;1 2 3&amp;#41;&amp;#41;
;; 3

&amp;#40;conj &amp;#91;1 2 3&amp;#93; :butter&amp;#41;
;; &amp;#91;1 2 3 :butter&amp;#93;  벡터 끝에 요소를 추가함
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;map&quot;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;p&gt;키:값 구조로 키는 문자열이나 키워드를 사용함&lt;br /&gt; 키 값으로 데이터를 찾을 수 있음&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:weapon &amp;quot;gun&amp;quot; :armor 120}

&amp;#40;get {:weapon &amp;quot;gun&amp;quot; :armor 120} :weapon&amp;#41;
;; &amp;quot;gun&amp;quot;

&amp;#40;get {:weapon &amp;quot;gun&amp;quot; :armor 120} :speed&amp;#41;
;; nil

&amp;#40;get {:weapon &amp;quot;gun&amp;quot; :armor 120} :speed &amp;quot;error&amp;quot;&amp;#41;
;; &amp;quot;error&amp;quot;

&amp;#40;:armor {:weapon &amp;quot;gun&amp;quot; :armor 120}&amp;#41;
;; 120

&amp;#40;keys {:weapon &amp;quot;gun&amp;quot; :armor 120}&amp;#41;
;; &amp;#40;:weapon :armor&amp;#41;

&amp;#40;vals {:weapon &amp;quot;gun&amp;quot; :armor 120}&amp;#41;
;; &amp;#40;&amp;quot;gun&amp;quot; 120&amp;#41;


&amp;#40;assoc {:weapon &amp;quot;gun&amp;quot; :armor 120} :speed 90&amp;#41;
;; {:weapon &amp;quot;gun&amp;quot; :armor 120 :speed 90}

&amp;#40;dissoc {:weapon &amp;quot;gun&amp;quot; :armor 120 :speed 90} :armor&amp;#41;
;; {:weapon &amp;quot;gun&amp;quot; :speed 90}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;set&quot;&gt;&lt;/a&gt;Set&lt;/h3&gt;&lt;p&gt;중복되지 않는 요소만 포함한다&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;#{:red :blud :white :pink}

;; set은 다른 콜렉션을 Set로 바꾼다
&amp;#40;set &amp;#91;1 2 3&amp;#93;&amp;#41;
;;#{1 3 2}

&amp;#40;set '&amp;#40;1 2 3&amp;#41;&amp;#41;
;; #{1 3 2}

&amp;#40;set {:a 1 :b 2 :c 3}&amp;#41;
;; #{&amp;#91;:c 3&amp;#93; &amp;#91;:b 2&amp;#93; &amp;#91;:a 1&amp;#93;}


&amp;#40;clojure.set/union #{:r :b :w} #{:w :p :y}&amp;#41;
;; #{:y :r :w :b :p}  중복요소 제거하고 모두 포함

&amp;#40;clojure.set/difference #{:r :b :w} #{:w :p :y}&amp;#41;
;; #{:r :b}

&amp;#40;clojure.set/intersection #{:r :b :w} #{:w :p :y}&amp;#41;
;;#{:w}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;binding&quot;&gt;&lt;/a&gt;Binding&lt;/h2&gt;&lt;p&gt;변수에 값을 할당하는 과정을 말한다&lt;br /&gt; repl에서 정의하면 기본적으로 user라는 네임공간(namespace)서만 사용가능하다&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;def devloper &amp;quot;Alice&amp;quot;&amp;#41;
;; #'user/developer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;let은 해당 컨텍스트안에서만 유효한 로컬 변수임 ``clojure (let [developer &quot;Alice in Wonderland&quot;])&lt;/p&gt;&lt;p&gt;(let [developer &quot;Alice in Wonderland&quot; rabbit &quot;White Rabbit&quot; ])&lt;/p&gt;&lt;p&gt;(let [[color size] [&quot;blue&quot; &quot;small&quot;]]   (str &quot;The &quot; color &quot; door is &quot; size)) ;; &quot;The blue door is small&quot;&lt;/p&gt;&lt;p&gt;(let [x [&quot;blue&quot; &quot;small&quot;]   color (first x)   size (last x)]    (str &quot;The &quot; color &quot; door is &quot; size)) ;; &quot;The blue door is small&quot;&lt;/p&gt;&lt;p&gt;;; 현재 네임공간 확인 &lt;em&gt;ns&lt;/em&gt; ;; #object[clojure.lang.Namespace 0x4e5051b9 &quot;user&quot;]&lt;/p&gt;&lt;p&gt;;; 다른 네임공간으로 전환 (ns alice) (def name &quot;King&quot;) (ns user) alice/name ;; &quot;King&quot; 다른 네임공간의 변수를 사용&lt;/p&gt;&lt;p&gt;;; alias 사용 (require '[alice :as al]) al/name ;; &quot;King&quot;&lt;/p&gt;&lt;p&gt;;; alias 사용하지 않고 현재 네임공간에서 사용할 경우 (ns wonderland   (:require [alice :refer :all] ;;alice 네임공간의 모든 것을 현재 네임공간에서 사용한다&lt;pre&gt;&lt;code&gt;        &amp;#91;rabbit :refer :all&amp;#93;&amp;#41;&amp;#41;
         &lt;/code&gt;&lt;/pre&gt;;;함수명이 같아서 충돌할 경우가 발생할 수 도 있다 ;; 그럴 경우 일부만 aliac로  사용하자&lt;/p&gt;&lt;p&gt;(ns wonderland   (:require [clojure.set :as s]&lt;pre&gt;&lt;code&gt;        &amp;#91;alice :as al&amp;#93;&amp;#41;&amp;#41;          &lt;pre&gt;&lt;code&gt;
## 함수정의

 &lt;/code&gt;&lt;/pre&gt;clojure (defn follow-the-rabbit [] &quot;Off we go!&quot;)&lt;/p&gt;&lt;p&gt;(follow-the-rabbit) ;; &quot;Off we go!&quot;&lt;/p&gt;&lt;p&gt;defn shop-for-jams [jam1 jam2]   {:name &quot;jam-basket&quot;    :jam1 jam1    :jam2 jam2})&lt;/p&gt;&lt;p&gt;(shop-for-jams &quot;strawberry&quot; &quot;marmalade&quot;) ;; {:name &quot;jam-basket&quot;, :jam1 &quot;strawberry&quot;, :jam2 &quot;marmalade&quot;}&lt;/p&gt;&lt;p&gt;;;anonymous 함수 (fn [] (str &quot;Off we go&quot; &quot;!&quot;)) ;; #object[user$eval1365$fn&lt;b&gt;1366 0x4c3e78fd &quot;user$eval1365$fn&lt;/b&gt;1366@4c3e78fd&quot;]&lt;/p&gt;&lt;p&gt;;; 단축표현(shorthand) (#(str &quot;Off we go&quot; &quot;!&quot;)) ;; &quot;Off we go!&quot;&lt;/p&gt;&lt;p&gt;(#(str &quot;Off we go&quot; &quot;!&quot; &quot; - &quot; %) &quot;again&quot;) ;; &quot;Off we go! - again&quot; %(또는 %1)는 첫번째 파라미터 두번째부터는 %2로 처리해야함&lt;pre&gt;&lt;code&gt;
## 제어구문


### if

 &lt;/code&gt;&lt;/pre&gt;clojure (if true &quot;true&quot; &quot;false&quot;) ;;-&gt; &quot;true&quot;&lt;/p&gt;&lt;p&gt;(if nil &quot;true&quot; &quot;false&quot;) ;;-&gt; &quot;false&quot;&lt;/p&gt;&lt;p&gt;(if (= :drink :drink)   &quot;Try&quot;   &quot;Don't try&quot; ) ;;-&gt; &quot;Try&quot;&lt;/p&gt;&lt;p&gt;(let [is-small (&gt; 5 3)]   (if is-small&lt;pre&gt;&lt;code&gt;&amp;quot;Small&amp;quot;
&amp;quot;No&amp;quot;&amp;#41;&amp;#41; &lt;/code&gt;&lt;/pre&gt;;; &quot;Small&quot;  &lt;br /&gt; ;; 5보다 3이 작은경우 true를 저장하고 조건에 맞는 결과값을 반환한다&lt;/p&gt;&lt;p&gt;(if-let [is-small (&gt; 5 3)]   &quot;Small&quot;   &quot;No&quot;) ;; &quot;Small&quot;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;
### when,when-let

 &lt;/code&gt;&lt;/pre&gt;clojure (defn ask [question]   (when question &quot;Yes&quot;)) ;;-&gt; &quot;Yes&quot;&lt;/p&gt;&lt;p&gt;(when-let [question] &quot;Yes&quot;) ;;-&gt; Yes otherwise nil&lt;pre&gt;&lt;code&gt;
### cond, case

 &lt;/code&gt;&lt;/pre&gt;clojure (let [bottle &quot;drink&quot;]   (cond&lt;pre&gt;&lt;code&gt;&amp;#40;= bottle &amp;quot;poison&amp;quot;&amp;#41; &amp;quot;don't touch&amp;quot;
&amp;#40;= bottle &amp;quot;empty&amp;quot;&amp;#41; &amp;quot;all gone&amp;quot;&amp;#41;&amp;#41; &lt;/code&gt;&lt;/pre&gt; ;;-&gt; nil&lt;pre&gt;&lt;code&gt;
cond와 달리 매칭되는 것이 없을 경우  IllegalArgumentException 을 발생시킴  
아래와 같이 익셉션을 발생하지 않고 unknown을 출력할 수 있음

 &lt;/code&gt;&lt;/pre&gt;clojure (let [bottle &quot;drink&quot;]  (case bottle    &quot;poison&quot; &quot;don't touch&quot;    &quot;drink&quot; &quot;drink it&quot;     &quot;unknown&quot; )) &lt;pre&gt;&lt;code&gt;
## Database

&amp;#42; &amp;#91;jdbc&amp;#93;&amp;#40;http://clojure-doc.org/articles/ecosystem/java&amp;#95;jdbc/home.html&amp;#41;
&amp;#42; &amp;#91;SQL Korma&amp;#93;&amp;#40;http://sqlkorma.com/&amp;#41;
&amp;#42; &amp;#91;monger&amp;#93;&amp;#40;http://clojuremongodb.info&amp;#41;

## Java Interoperability



## Web Programming

&amp;#42; &amp;#91;Ring&amp;#93;&amp;#40;https://github.com/ring-clojure/ring&amp;#41;
&amp;#42; &amp;#91;Luminus&amp;#93;&amp;#40;http://www.luminusweb.net&amp;#41;


## 3rd Party Libraries

&amp;#42; bouncer
&amp;#42; validateur
&amp;#42; SQLingvo
&amp;#42; HoneySQL

## plugins

### lein-try 사용하기

아래 파일을 편집한다

${HOME}/.lein/profiles.clj


 &lt;/code&gt;&lt;/pre&gt;clojure {:user {:plugins [[lein-try &quot;0.4.3&quot;]]}}&lt;pre&gt;&lt;code&gt;clj-time이라는 라이브러를 가지고 간단한 테스트 해볼때  
아래와 같이 repl를 열수있다

 &lt;/code&gt;&lt;/pre&gt; lein try clj-time&lt;pre&gt;&lt;code&gt;

</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 25 Sep 2015 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://clonekim.github.io/posts/2015-09-23-freemarker-assign-tip.html
</guid>
<link>
http://clonekim.github.io/posts/2015-09-23-freemarker-assign-tip.html
</link>
<title>
Freemarker assign팁
</title>
<description>
&lt;p&gt;변수 x에 42를 할당하고 이것은 명백히 Number 타입이다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;#assign x=42 /&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;String타입으로 변환할 수 있다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;${x?string}
${x?string&amp;#91;0..1&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;.(dot)가 들어간 변수도 사용할 수 있다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;#assign telephone=&amp;quot;${site\\.telephone?string}&amp;quot; /&amp;gt;  //15881234
${telephone&amp;#91;0..3&amp;#93;}-${telephone&amp;#91;4..7&amp;#93;} //1588-1234
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 23 Sep 2015 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://clonekim.github.io/posts/2015-09-10-oracle-jdbc.html
</guid>
<link>
http://clonekim.github.io/posts/2015-09-10-oracle-jdbc.html
</link>
<title>
Oracle Jdbc Url
</title>
<description>
&lt;p&gt;JDBC URL syntax&lt;/p&gt;&lt;pre&gt;&lt;code&gt;jdbc:oracle:thin:@&amp;#91;HOST&amp;#93;&amp;#91;:PORT&amp;#93;:SID

jdbc:oracle:thin:@//&amp;#91;HOST&amp;#93;&amp;#91;:PORT&amp;#93;/SERVICE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hikari Pool를 사용 시 아래와 같이 경고메시지가 나타나면&lt;br /&gt; oracle.jdbc.driver.OracleDriver에서 oracle.jdbc.OracleDriver 로 바꿀 것&lt;/p&gt;&lt;pre&gt;&lt;code&gt;2015-09-10 WARN  &amp;#40;main&amp;#41; &amp;#91;DriverDataSource&amp;#40;&amp;lt;init&amp;gt;:68&amp;#41;&amp;#93; Registered driver with driverClassName=oracle.jdbc.driver.OracleDriver was not found, trying direct instantiation.
2015-09-10 DEBUG &amp;#40;main&amp;#41; &amp;#91;PoolUtilities&amp;#40;getAndSetNetworkTimeout:198&amp;#41;&amp;#93; HikariPool-0 - Connection.setNetworkTimeout&amp;#40;&amp;#41; not supported
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 10 Sep 2015 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://clonekim.github.io/posts/2015-09-03-mariadb-replication-using-gtid.html
</guid>
<link>
http://clonekim.github.io/posts/2015-09-03-mariadb-replication-using-gtid.html
</link>
<title>
GTID를 이용한 Mariadb Replication
</title>
<description>
 &lt;h2&gt;&lt;a name=&quot;환경&quot;&gt;&lt;/a&gt;환경&lt;/h2&gt;&lt;p&gt;vm002: master&lt;br /&gt; vm003: slave&lt;/p&gt; &lt;h2&gt;&lt;a name=&quot;마스터설정&quot;&gt;&lt;/a&gt;마스터설정&lt;/h2&gt;&lt;p&gt;GTID를 사용하기 위해 &lt;code&gt;gtid&amp;#95;strict&amp;#95;mode&lt;/code&gt;를 활성해야함&lt;br /&gt; 활성화시키위해서 서버를 재시작한다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;server-id = 1
character-set-server = utf8
bind-address = 0.0.0.0
log&amp;#95;bin = /var/lib/mysql/mariadb-bin
expire&amp;#95;logs&amp;#95;days = 2
sync&amp;#95;binlog = 0
slave&amp;#95;compressed&amp;#95;protocol = 1
binlog&amp;#95;format = row
gtid&amp;#95;strict&amp;#95;mode = 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;마스터에 접속할 슬레이브계정을 만든다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;create user 'replication@vm003' identified by 'password';
grant replication slave on &amp;#42;.&amp;#42; to 'replication@vm003';
flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;슬레이브설정&quot;&gt;&lt;/a&gt;슬레이브설정&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;mysqld&amp;#93;
server-id = 2
character-set-server = utf8
bind-address = 0.0.0.0
slave&amp;#95;compressed&amp;#95;protocol = 1
binlog&amp;#95;format = row
read&amp;#95;only
gtid&amp;#95;strict&amp;#95;mode = 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;슬레이브 시작을 위해서 GTID 정보가 필요하다&lt;br /&gt; 마스터에서 DB에 변화를 주면 이벤트가 발생하고 아래와 같이 이벤트 번호를 확인가능하다&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/mariadb/master.png&quot; alt=&quot;Master&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/mariadb/slave_pos.png&quot; alt=&quot;Slave Setting&quot; /&gt;&lt;/p&gt;&lt;p&gt;슬레이브에서는 마스터의 gtid를 확인을 하려면 먼저 슬레이브를 시작하여야 함&lt;/p&gt;&lt;pre&gt;&lt;code&gt;stop slave
reset slave
startslave
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 03 Sep 2015 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://clonekim.github.io/posts/2015-07-18-install-redmine.html
</guid>
<link>
http://clonekim.github.io/posts/2015-07-18-install-redmine.html
</link>
<title>
Redmine3 설치하기
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;설치환경&quot;&gt;&lt;/a&gt;설치환경&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;redmine-3.0.4&lt;/li&gt;&lt;li&gt;centos 6.6&lt;/li&gt;&lt;li&gt;http://www.redmine.org/projects/redmine/wiki/RedmineInstall&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;rvm&amp;#95;설치&quot;&gt;&lt;/a&gt;RVM 설치&lt;/h2&gt;&lt;p&gt;https://rvm.io&lt;/p&gt;&lt;p&gt;rvm을 이용하여 루비를 버젼별로 설치및 관리할 수 있다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rvm install ruby
rvm gemset create redmine
rvm gemset use redmine
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;의존성&amp;#95;라이브러리&quot;&gt;&lt;/a&gt;의존성 라이브러리&lt;/h3&gt;&lt;p&gt;http://www.redmine.org/projects/redmine/wiki/Install&lt;i&gt;Redmine&lt;/i&gt;25x&lt;i&gt;on&lt;/i&gt;Centos&lt;i&gt;65&lt;/i&gt;complete&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;redmine&amp;#95;설치&quot;&gt;&lt;/a&gt;redmine 설치&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;$ cd redmine-x.x.x
$ gem install bundler
$ bundle install --without development test
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;thin&quot;&gt;&lt;/a&gt;Thin&lt;/h2&gt;&lt;p&gt;Gemfile을 수정하여 thin을 최상단에 추가&lt;br /&gt; 다시 번들로 라이브러리 설치&lt;/p&gt;&lt;pre&gt;&lt;code&gt;bundle install --without development test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;아래 파일을 /etc/thin/redmine.yml 로 저장&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yml&quot;&gt;---
chdir: &amp;quot;/home/redmine&amp;quot;
environment: production
address: 127.0.0.1
port: 3000
timeout: 30
log: &amp;quot;/home/redmine/log/thin.log&amp;quot;
pid: tmp/pids/thin.pid
max&amp;#95;conns: 1024
max&amp;#95;persistent&amp;#95;conns: 100
require: &amp;#91;&amp;#93;
wait: 30
threadpool&amp;#95;size: 20
servers: 2
daemonize: true 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;thin서버 시작&lt;/p&gt;&lt;pre&gt;&lt;code&gt;thin start -C /etc/thin/redmine.yml
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;참고&quot;&gt;&lt;/a&gt;참고&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;http://www.php5.me/blog/centos-6-6-mariadb-10-0-%ec%97%90-redmine-2-6-0-%ec%84%a4%ec%b9%98/&lt;/li&gt;&lt;/ul&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 18 Jul 2015 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://clonekim.github.io/posts/2015-07-16-windows-vim.html
</guid>
<link>
http://clonekim.github.io/posts/2015-07-16-windows-vim.html
</link>
<title>
윈도우즈 Vim설정
</title>
<description>
 &lt;p&gt; vi를 윈도우즈에서 사용하기 위한 가이드&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;설치&quot;&gt;&lt;/a&gt;설치&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;http://www.vim.org&lt;/li&gt;&lt;li&gt;http://www.vim.org/download.php&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;설정&quot;&gt;&lt;/a&gt;설정&lt;/h2&gt;&lt;p&gt;아래 파일을 C:\Users&amp;#91;계정명]&amp;#95;vimrc 에 위치한다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;set nu
set autoindent
set nobackup
set showcmd
set ruler
set enc=utf-8
set fencs=euckr,cp949,utf-8
set tabstop=3
set nowrap

lang mes en&amp;#95;US

source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 16 Jul 2015 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://clonekim.github.io/posts/2015-07-14-sinatra.html
</guid>
<link>
http://clonekim.github.io/posts/2015-07-14-sinatra.html
</link>
<title>
Sinatra 웹프로그래밍
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;설치&quot;&gt;&lt;/a&gt;설치&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;jruby -S gem install sinatra
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;hello&amp;#95;ruby&quot;&gt;&lt;/a&gt;Hello Ruby&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'rubygems'
require 'sinatra'

get '/' do
  'Hello Jruby'
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;라우터&quot;&gt;&lt;/a&gt;라우터&lt;/h2&gt;&lt;p&gt;get, post, put, delete를 사용할 수있다&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;get '/' do

end
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;요청파라미터&quot;&gt;&lt;/a&gt;요청파라미터&lt;/h2&gt;&lt;p&gt;/?name=foo 로 요청 시 아래와 같이&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;post '/' do
  puts params&amp;#91;'name'&amp;#93;
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;본문으로&amp;#95;json를&amp;#95;요청받을&amp;#95;경우&quot;&gt;&lt;/a&gt;본문으로 Json를 요청받을 경우&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;post '/' do
  payload = JSON.parse&amp;#40;request.body.read&amp;#41;
  puts payload
  status 201
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;{{:jruby:post.png?200|}}&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;응답하기&quot;&gt;&lt;/a&gt;응답하기&lt;/h2&gt;&lt;p&gt;문자열, html, json, 바이너리 등의 모든 컨텐츠로 응답가능하다&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;get '/' do
  'Hello'
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;json으로&amp;#95;응답하기&quot;&gt;&lt;/a&gt;Json으로 응답하기&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'sinatra'
require 'json'

get '/' do
  content&amp;#95;type :json
  data = { foo: 'bar'}
  data.to&amp;#95;json
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또는 sinatra-contrib를 사용해서&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'sinatra'
require 'sinatra-contrib'

get '/' do
  data = { foo: 'bar'}
  json data
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;sample&amp;#95;web&quot;&gt;&lt;/a&gt;Sample Web&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;app.rb&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'rubygems'
require 'sinatra'
require 'sinatra/reloader'
require 'json'
require 'sequel'
require './mysql-connector-java-5.1.35.jar'

DB = Sequel.connect&amp;#40;'jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;amp;characterEncoding=utf8',
			:user=&amp;gt;'test',
			:password=&amp;gt;'test'&amp;#41;
user = DB&amp;#91;:users&amp;#93;


get '/' do
  erb :index
end

get '/api/users' do
  data = user.all
  pager = {
 	total: data.count,
	rows: data,
	page: 1
  }
  pager.to&amp;#95;json
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;config.ru&lt;/strong&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;require 'app.rb'
run Sinatra::Application
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;아래와 같이 실행한다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;jruby app.rb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;실행 시 내장된 웹서버서(WEBrick)를 사용한다&lt;br /&gt; 기본적으로 4567번 포트를 사용한다&lt;/p&gt;&lt;p&gt;아래는 Rack기반으로 기동하는 방법이다&lt;br /&gt; 기본적으로 9292번 포트를 사용한다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;jruby -S rackup config.ru
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;===== 템플릿 =====&lt;/p&gt;&lt;p&gt;기본적으로 erb템플릿을 사용한다&lt;/p&gt;&lt;p&gt;&lt;strong&gt;디렉토리 구조&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;public에 정적인 파일을 views에 .erb파일이 위치한다.&lt;/p&gt;&lt;p&gt;&lt;code&gt; ├─public └─views&lt;pre&gt;&lt;code&gt;   index.erb
   layout.erb &lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;     &lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;file ruby layout.erb&gt; &lt;body&gt;  &lt;%= yield %&gt; &lt;/body&gt; &lt;/file&gt;&lt;/p&gt;&lt;p&gt;&lt;file ruby index.erb&gt; &lt;h1&gt;Hello Sinatra&lt;/h1&gt; &lt;%= $servlet_context %&gt; &lt;/file&gt;&lt;/p&gt;&lt;p&gt;&lt;file ruby&gt; get '/' do   erb :index end &lt;/file&gt;&lt;/p&gt;&lt;p&gt;$servlet_context라는 인스턴스명을 출력할 것이다 &amp;#92; 단지 rack기반일 경우에만 출력됨&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;contrib&amp;#95;활용&quot;&gt;&lt;/a&gt;Contrib 활용&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;jruby -S gem install sinatra-contrib&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;reloader만 추가하고 소스를 수정 시 바로 적용됨&lt;/p&gt;&lt;pre&gt;&lt;code&gt;require 'sinatra/reloader'
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;war&amp;#95;배포&quot;&gt;&lt;/a&gt;War 배포&lt;/h2&gt;&lt;p&gt;warbler를 설치한다&lt;/p&gt;&lt;pre&gt;&lt;code&gt;jruby -S gem install warbler&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;루비웹 프레임워크는 rack 이라는 인터페이스위에서 작동한다&lt;br /&gt; 자바의 서블릿과 같다&lt;br /&gt; rack으로 기동하는 파일을 작성한다&lt;/p&gt;&lt;p&gt;&lt;file ruby config.ru&gt; require 'app.rb' run Sinatra::Application &lt;/file&gt;&lt;/p&gt;&lt;p&gt;config 디렉토리를 만들고 warble config를 작성한다 &amp;#92; config아래에 warble.config라는 파일이 생성된다&lt;/p&gt;&lt;p&gt;&lt;code&gt; mkdir config jruby -S warble config &lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;file ruby warble.rb&gt; Warbler::Config.new do |config|&lt;/p&gt;&lt;p&gt;   config.dirs = %w(public views)    config.includes = FileList[&quot;app.rb&quot;]    config.gems += [&quot;sinatra&quot;,&quot;sinatra-contrib&quot;, &quot;sequel&quot;]    config.gem_dependencies = true    config.pathmaps.application = [&quot;WEB-INF/%p&quot;]    config.jar_name = &quot;app&quot; end&lt;br /&gt; &lt;/file&gt;&lt;/p&gt;&lt;p&gt;이제 war파일을 작성하면 &amp;#92; app.war 라는 파일이 보일것이다 &lt;code&gt; jruby -S warble &lt;/code&gt;&lt;/p&gt;&lt;p&gt;===== 참고 =====&lt;/p&gt;&lt;p&gt;http://www.rubyinside.com/sinatra-29-links-and-resources-for-a-quicker-easier-way-to-build-webapps-1371.html http://aligach.net/diary/20110307.html http://www7b.biglobe.ne.jp/~makandat/gg&lt;i&gt;sites/Sinatra&lt;/i&gt;Diary_01.html#example1&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 14 Jul 2015 00:00:00 +0900
</pubDate>
</item>
<item>
<guid>
http://clonekim.github.io/posts/2015-07-02-angularjs.html
</guid>
<link>
http://clonekim.github.io/posts/2015-07-02-angularjs.html
</link>
<title>
AngularJS
</title>
<description>

</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 02 Jul 2015 00:00:00 +0900
</pubDate>
</item>
</channel>
</rss>
